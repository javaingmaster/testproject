package Play;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import javax.imageio.ImageIO;

/**
 * 
 * @author Zheng Mofang
 * @date Jun 5, 2017
 * @description The methods used frequently
 *
 */
@SuppressWarnings("all")
public class PlaneGameUtil {
	private static Timer t = new Timer();
	// The root file of this project
	private final static String root = PlaneGameUtil.class.getResource("/").getFile().toString();

	/**
	 * read a certain image in the same package to this class file
	 * 
	 * @param name
	 *            The name of the image file.It is consisted by the package name
	 *            and picture name,such as "pictures/plane.png".
	 */
	public static BufferedImage readImage(String name) {
		BufferedImage image = null;
		try {
			image = ImageIO.read(new File(root + name));
		} catch (IOException e) {
			e.printStackTrace();
		}
		System.out.println(root+name);
		return image;
	}

	/**
	 * Get the image according to the image style.
	 * 
	 * @param imageStyle
	 * @return
	 */
	public static BufferedImage getImage(int imageStyle) {
		return ImageManager.getImage(imageStyle);
	}

	/**
	 * start a new thread
	 * 
	 * @param job
	 *            The job this thread to execute
	 */
	public static void startThread(Runnable job) {
		new Thread(job).start();
	}

	/**
	 * initial an object where it appears.
	 */
	public static Drawable initialObjects() {
		return null;
	}

	/**
	 * Invoke the certain method after certain milliseconds.
	 * 
	 * @param task
	 *            The instance of the TimerTaker that overrides the method named
	 *            run.
	 * @param delay
	 *            The delay of the milliseconds this task will be executed.
	 */
	public static void time(TimerTask task, long delay) {
		t.schedule(task, delay);
	}

	/**
	 * Make the destination container empty and add all elements from source
	 * container.
	 * 
	 * @param src
	 * @param dest
	 */
	public static void getListCopy(List src, List dest) {
		dest.clear();
		dest.addAll(src);
	}

	/**
	 * get a new notice
	 */
	public static void getNotice(int xpos, int ypos, Font font, Color color, String notice, List<Drawable> objects) {
		Notice noti = new Notice(xpos, ypos, font, color, notice, objects);
		objects.add(noti);

		// The notice instance will show certain millisecond.
		time(noti, 500);
	}

	/**
	 * draw the explosion at the certain location.
	 * 
	 * @param xpos
	 * @param ypos
	 * @param g
	 */
	public static void drawExplosion(Plane p, Graphics g,List<Drawable> noticeAndExplosion) {
		for (int i = Constants.EXPLOSION_ONE; i <= Constants.EXPLOSION_SIX; i++) {
			g.drawImage(getImage(i), p.xpos, p.ypos, null);
		}
		noticeAndExplosion.remove(p);
	}

	/**
	 * Get a new bullet.
	 * 
	 * @param xpos
	 * @param ypos
	 * @param damage
	 * @param imageStyle
	 * @param bullets
	 *            The container that the bullet should be put into.If the bullet
	 *            is generated by the player,the container must be
	 *            playerBullets.Else, it must be enemyBullets.
	 * @return
	 */
	public static Bullet getBullet(int xpos, int ypos, int damage, int imageStyle, List<Bullet> bullets) {
		return new Bullet(xpos, ypos, damage, imageStyle, bullets,false);
	}

	/**
	 * Get a new enemy plane.
	 * 
	 * @param xpos
	 * @param ypos
	 * @param damage
	 * @param imageStyle
	 * @param bulletStyle
	 * @param life
	 * @param enemy
	 * @param noticeAndExplosion
	 * @return
	 */
	public static Plane getEnemyPlane(int xpos, int ypos, int damage, int imageStyle, int bulletStyle, int life,
			List<Plane> enemy, List<Drawable> noticeAndExplosion,int frequency,int movetype) {
		if (Constants.ME == imageStyle) {
			return null;
		}
		return new Plane(xpos, ypos, damage, imageStyle, bulletStyle, life, enemy, noticeAndExplosion,null,null,null,frequency,movetype);
	}


	/**
	 * Get the certain prop.
	 * 
	 * @param xpos
	 * @param ypos
	 * @param imageStyle
	 * @return
	 */
	public static Prop getProps(int xpos, int ypos, int imageStyle) {
		return new Prop(xpos, ypos, getImage(imageStyle));
	}
}
